// using System;
// using System.Linq;
// using System.Threading.Tasks;
// using backend.Controllers;
// using backend.Models;
// using backend.Tests.Utils;
// using FluentAssertions;
// using Microsoft.AspNetCore.Mvc;
// using Microsoft.Extensions.Logging;
// using Moq;
// using Xunit;

// namespace backend.Tests.Controllers
// {
//     public class ChoiceControllerTest : IAsyncLifetime
//     {

//         private ChoiceController testObject;
//         private QuizCreationDbContext db;

//         public async Task InitializeAsync()
//         {
//             db = await TestUtils.GetTestDbContext();
//             testObject = new ChoiceController(db, new Mock<ILogger<ChoiceController>>().Object);
//         }

//         public async Task DisposeAsync()
//         {
//             await db.DisposeAsync();
//         }

//         public class GetChoice : ChoiceControllerTest
//         {

//             [Fact]
//             public async void WhenDbConnection_ReturnsOkObjectContainingTest()
//             {
//                 var response = await testObject.Get();

//                 response.Should().BeOfType<OkObjectResult>();
//                 var result = (response as OkObjectResult).Value as Choice;
//                 result.Text.Should().Be(TestUtils.CHOICE_TEXT);
//             }

//             [Fact]
//             public async void WhenNoChoice_ReturnsNotFound()
//             {
//                 db.Choices.Remove(db.Choices.First());
//                 await db.SaveChangesAsync();

//                 var response = await testObject.Get();

//                 response.Should().BeOfType<NotFoundResult>();
//             }

//             [Fact]
//             public async void WhenAnErrorOccursUsingDataBase_ThrowsError()
//             {
//                 var mockDb = new Mock<QuizCreationDbContext>();

//                 mockDb.Setup(x => x.Choices).Throws(new Exception("Something Broke"));

//                 var testObject = new ChoiceController(mockDb.Object, new Mock<ILogger<ChoiceController>>().Object);

//                 var exception = await Assert.ThrowsAsync<Exception>(() => testObject.Get());

//                 exception.Message.Should().Be("Something Broke");
//             }
//         }
//     }
// }
